Type casting - 

1. Date Manipulation
   - Question: Retrieve the rental dates from the rental table and convert them to a custom date format. Then, group the rentals by month and calculate the total revenue for each month.

2. Complex Data Conversion
   - Question: In the customer table, extract the domain names from the email addresses and convert them to uppercase. Return the distinct domain names along with the count of customers having emails from each domain.

3. Handling Invalid Data
   - Question: Parse the description column from the film table as integers. For any descriptions that cannot be parsed as integers, truncate them and append '... (truncated)'. Display the modified descriptions along with the film titles.

4. Conditional Conversions
   - Question: Convert the postal_code column from the address table to integers. If the conversion fails, set the value to 0. Then, calculate the average postal code value for each city and display the result along with the city names.

5. Multi-step Conversion
   - Question: Convert the special_features column from the film table to a binary representation where each feature is represented by a bit. Handle null values gracefully. Then, aggregate the binary representations to count the occurrence of each feature across all films.

1. Advanced Query 1: Conditional Aggregation
   - Question: Calculate the average rental duration for each film category. If the average rental duration is null, replace it with the overall average rental duration for all films.

2. **Advanced Query 2: Dynamic Pagination**
   - Question: Implement dynamic pagination for retrieving customer records from the customer table. Allow users to specify the page number and the number of records per page.

3. **Advanced Query 5: Conditional Ordering**
   - Question: Retrieve the top 10 customers based on their total payments. If two customers have the same total payment, order them alphabetically by their last names.

Group By Types - 

**Medium Level:**

1. Grouping Sets
   - Question: Calculate the total revenue generated by each store, grouping by store ID. Additionally, provide the total revenue across all stores.

2. Rollup
   - Question: Determine the count of rentals for each combination of customer and film category. Include the total count of rentals for each customer and the overall count for each film category.

3. Cube
   - Question: Generate a report showing the total payments received per month, broken down by store, film category, and customer country. Include the grand total payment across all months, stores, categories, and countries.

4. **Advanced Query 2: Grouping Sets**
   - Question: Calculate the average rental duration for each film category, store, and customer city. Include the overall average rental duration. Handle null values appropriately.

Date and Time - 

1. **Advanced Query 1: Date Arithmetic**
   - Question: Calculate the average rental duration for each film category, considering only rentals that occurred during weekends (Saturday and Sunday). Exclude rentals with a duration longer than 3 days.

2. **Advanced Query 2: Date Extraction**
   - Question: Determine the total number of rentals made by each customer during the last quarter of the previous year. Consider only rentals with a return date falling within the specified period.

3. **Advanced Query 3: Date Comparison**
   - Question: Identify the films released in the same year and month as their rental date. Additionally, calculate the average rental rate for these films, rounded to the nearest cent.

4. **Advanced Query 4: Date Truncation**
   - Question: Retrieve the top 10 customers based on their total payments, considering only payments made during the current calendar year. Exclude payments made in the last 30 days.

5. **Advanced Query 5: Date Formatting**
   - Question: Generate a report showing the total revenue generated each month, with revenue values formatted as currency. Include the top 5 months with the highest revenue, ordered by revenue amount.

MetaData fucntion - 

1. **Advanced Query 1: Table Metadata**
   - Question: Retrieve the column names, data types, and maximum lengths for all columns in the `customer` table. Additionally, include information about any constraints (e.g., primary keys, foreign keys).

2. **Advanced Query 2: Index Metadata**
   - Question: Identify all indexes defined on the `rental` table, including their names, types, and the columns they cover. Additionally, provide information about their fragmentation levels and storage statistics.

3. **Advanced Query 3: View Definition**
   - Question: Retrieve the definition of the `customer_list` view, including the underlying tables, columns selected, and any filtering or joins applied. Also, identify any dependencies of the view on other database objects.

4. **Advanced Query 4: Procedure Parameters**
   - Question: List all parameters of the stored procedures defined in the database, including their names, data types, and whether they are input or output parameters. Additionally, provide information about any default values or constraints.

5. **Advanced Query 5: User-Defined Function Metadata**
   - Question: Identify all user-defined functions in the database, including their names, parameter counts, return types, and definitions. Additionally, provide information about their execution contexts and permissions.


Security Function - 

1. **Advanced Query 1: User Permissions**
   - Question: Retrieve a list of all users in the database along with their associated permissions on the `film` table. Include details such as granted permissions, object types, and whether permissions are granted directly or through roles.

2. **Advanced Query 2: Role Membership**
   - Question: Identify all database roles in the system and list the users who are members of each role. Additionally, include information about any nested roles and their corresponding members.

3. **Advanced Query 3: Object Ownership**
   - Question: Determine the owner of each table in the database and list their associated permissions on the table. Additionally, identify any users or roles granted ownership permissions on the objects.

4. **Advanced Query 4: Security Policy Evaluation**
   - Question: Evaluate the effectiveness of row-level security policies implemented on the `customer` table. Identify the number of rows filtered out by each policy and provide insights into the data access patterns.

5. **Advanced Query 5: Audit Trail Analysis**
   - Question: Analyze the database audit trail to identify all security-related events, such as login attempts, user creations, role assignments, and permission changes. Provide details about the timestamp, event type, and affected objects.


String Function - 

1. **Advanced Query 1: Concatenation and Substring**
   - Question: Retrieve the first 50 characters of the concatenated `first_name` and `last_name` columns from the `customer` table for customers whose last names contain the substring 'son'. Additionally, append '...' to the end of each concatenated name.

2. **Advanced Query 2: String Manipulation and Padding**
   - Question: Generate a report showing the titles of films that have a length less than 100 characters. For films with short titles, left-pad the title with spaces to make it exactly 100 characters long, and right-pad the title with '***' if it's shorter than 100 characters.

3. **Advanced Query 3: Pattern Matching and Replacement**
   - Question: Identify all addresses in the `address` table that contain a postal code in the format '###-####'. For addresses with such postal codes, replace the hyphen with a forward slash '/'. 

4. **Advanced Query 4: Case Sensitivity and Collation**
   - Question: Retrieve the titles of films that contain the word 'Adventure' in their description, regardless of case sensitivity. Use a case-insensitive collation for the comparison.

5. **Advanced Query 5: Regular Expression Matching**
   - Question: Identify all customers whose email addresses contain a numeric substring followed by '@example.com'. Use a regular expression pattern matching function to perform the search.

6. **Advanced Query 6: String Aggregation and Distinct Values**
   - Question: Aggregate the distinct special features from the `film` table into a single comma-separated list. Exclude any special features containing the word 'deleted'. Additionally, concatenate the count of films having each special feature next to its name.

7. **Advanced Query 7: Trimming and Padding**
   - Question: Retrieve the titles of films from the `film` table, trimming leading and trailing spaces from the titles. For titles shorter than 50 characters, left-pad them with spaces to make them exactly 50 characters long.

8. **Advanced Query 8: Tokenization and Counting**
   - Question: Tokenize the description column of the `film` table into individual words and count the occurrences of each word. Ignore common stop words such as 'the', 'and', 'of', etc., and consider only words with lengths greater than 3 characters.

9. **Advanced Query 9: Regular Expression Extraction and Concatenation**
   - Question: Extract the first numeric substring from the postal code column of the `address` table for each city. Concatenate the city name and the extracted numeric substring with a colon ':' separator.

10. **Advanced Query 10: String Comparison and Transformation**
   - Question: Identify all films whose titles are an anagram of the phrase 'Star Wars'. Perform a case-insensitive comparison and exclude films with exactly the same title as 'Star Wars'.

Common Table Expression - 

1. **Advanced Query 1: Recursive CTE**
   - Question: Implement a recursive CTE to generate a hierarchical structure of cities and countries based on the `city` and `country` tables. Display each city along with its country, and recursively include all cities within the same country.

2. **Advanced Query 2: CTE with Aggregation**
   - Question: Utilize a CTE to calculate the total revenue generated by each store in the `payment` table. Then, join this CTE with the `store` table to retrieve additional information about each store, such as its manager's name and address.

3. **Advanced Query 3: CTE with Window Functions**
   - Question: Implement a CTE to partition the `rental` table by customer and calculate the cumulative count of rentals for each customer, ordered by rental date. Then, filter the results to include only customers who have rented at least 5 films in total.

4. **Advanced Query 4: Nested CTEs**
   - Question: Create a nested CTE to first calculate the average rental rate for each film category in the `film` table. Then, use this result to identify films within each category that have a rental rate higher than the category average.

5. **Advanced Query 5: CTE with Pivot**
   - Question: Construct a CTE to pivot the data from the `rental` table, summarizing the count of rentals for each film category by month. Include columns for each month of the year, and pivot the data dynamically to handle varying months.

Windows Function - 

1. **Advanced Query 1: Ranking with Partitioning**
   - Question: Rank customers based on their total payments, partitioned by store. Include the customer ID, name, total payments, and their rank within each store, ordered by total payments descending.

2. **Advanced Query 2: Moving Averages**
   - Question: Calculate a 7-day moving average of the rental duration for each film, considering the rentals ordered by rental date. Display the film ID, title, rental duration, and the moving average duration for each rental.

3. **Advanced Query 3: Running Totals with Filtering**
   - Question: Compute the running total of payments made by each customer, excluding payments with amounts greater than $50. Include the customer ID, name, payment amount, and the running total, ordered by payment date.

4. **Advanced Query 4: Top-N Analysis with Ties**
   - Question: Identify the top 3 customers with the highest total payments, allowing for ties. Include the customer ID, name, total payments, and rank, ensuring that customers with equal payments receive the same rank.

5. **Advanced Query 5: Percentile Calculation**
   - Question: Determine the 90th percentile of rental durations for each film category. Display the category name, film ID, title, rental duration, and the computed 90th percentile value.

6. **Advanced Query 6: Lag and Lead Analysis**
   - Question: For each film, calculate the difference in rental rates between the current film and the next film ordered by rental rate. Include the film ID, title, rental rate, and the difference in rental rates.

7. **Advanced Query 7: Cumulative Sum with Reset**
   - Question: Compute the cumulative sum of rental durations for each customer, resetting the sum whenever a customer's total duration exceeds 20 hours. Include the customer ID, name, rental duration, and the cumulative sum.

8. **Advanced Query 8: Median Calculation**
   - Question: Determine the median rental duration for each film category. Display the category name, film ID, title, and the computed median rental duration, handling both even and odd numbers of rentals.

9. **Advanced Query 9: Rank Deduplication**
   - Question: Rank films based on their rental rates, deduplicating ranks in case of ties. Include the film ID, title, rental rate, and the rank, ensuring that tied films receive the same rank without gaps.

10. **Advanced Query 10: Time Series Analysis**
   - Question: Compute the year-over-year percentage change in total payments for each store. Include the store ID, name, year, total payments, and the percentage change compared to the previous year.

Function, Procedure, Cursor, While - 

1. **Advanced Query 1: Cursor for Aggregation**
   - Question: Implement a cursor to calculate the total revenue generated by each store in the `payment` table. Display the store ID, name, and total revenue.

2. **Advanced Query 2: Dynamic SQL in Procedure**
   - Question: Write a stored procedure that dynamically generates SQL statements to retrieve the top 5 customers with the highest total payments. Execute the generated SQL within the procedure and return the results.

3. **Advanced Query 3: Recursive CTE in Function**
   - Question: Create a user-defined function that uses a recursive Common Table Expression (CTE) to calculate the factorial of a given integer. Test the function with various input values.

4. **Advanced Query 4: Cursor for Data Transformation**
   - Question: Implement a cursor to iterate over the `rental` table and calculate the total rental duration for each customer. Store the results in a temporary table and return the aggregated data.

5. **Advanced Query 5: Error Handling in Procedure**
   - Question: Write a stored procedure that attempts to insert data into the `customer` table. Implement error handling to capture any duplicate key violations and handle them gracefully.

6. **Advanced Query 6: While Loop for Data Processing**
   - Question: Utilize a while loop to iterate over the `inventory` table and update the rental duration of each film based on certain conditions. Track the number of rows updated and return the count.

7. **Advanced Query 7: Function for Complex Calculation**
   - Question: Develop a user-defined function that calculates the compound interest for a given principal amount, interest rate, and time period. Test the function with various input values.

8. **Advanced Query 8: Cursor for Hierarchical Data**
   - Question: Implement a cursor to traverse a hierarchical structure of cities and countries based on the `city` and `country` tables. Display each city along with its country, recursively including all cities within the same country.

9. **Advanced Query 9: Procedure with Dynamic Table Creation**
   - Question: Write a stored procedure that dynamically creates a table based on user-provided parameters such as table name, column names, and data types. Execute the procedure to create custom tables.

10. **Advanced Query 10: Function for String Manipulation**
    - Question: Create a user-defined function that accepts a string parameter and returns the reverse of the input string. Test the function with various input strings to validate its functionality.

Buit in Procedure and Built in Function - 

1. **Advanced Query 1: Complex Data Transformation with CROSS APPLY**
   - Question: Use the CROSS APPLY operator along with the STRING_SPLIT function to split the special_features column in the film table into individual features. Then, pivot the results to count the occurrences of each feature across all films.

2. **Advanced Query 2: Pivot and Unpivot for Data Analysis**
   - Question: Utilize the PIVOT and UNPIVOT operators to transform the data in the rental table. Pivot the rental durations by month and film category, then unpivot the pivoted data to analyze the distribution of rental durations.

3. **Advanced Query 3: Analyzing Data Distribution with NTILE**
   - Question: Divide the customers into four quartiles based on their total payments using the NTILE function. Calculate summary statistics such as the count, minimum, maximum, and average total payments for each quartile.

4. **Advanced Query 4: Analyzing Trends with LEAD and LAG**
   - Question: Utilize the LEAD and LAG functions to analyze the change in rental rates for each film over time. Calculate the difference between the current rental rate and the previous rental rate, ordered by film and rental date.

5. **Advanced Query 5: Analyzing Data Distribution with PERCENTILE_CONT**
   - Question: Determine the 25th, 50th, and 75th percentile of rental durations for each film category using the PERCENTILE_CONT function. Display the category name along with the computed percentiles.

6. **Advanced Query 6: Analyzing Temporal Data with DATEADD and DATEDIFF**
   - Question: Use the DATEADD and DATEDIFF functions to calculate the difference in rental dates for each film. Group the results by film title and display the minimum, maximum, and average rental duration in days.

7. **Advanced Query 7: Analyzing Data Trends with ROW_NUMBER and RANK**
   - Question: Rank the films based on their rental rates using the ROW_NUMBER and RANK functions. Compare the results and identify any discrepancies between the rankings produced by the two functions.

8. **Advanced Query 8: Analyzing Data Sparsity with COUNT and GROUPING SETS**
   - Question: Compute the count of rentals for each combination of film category, language, and rental duration using the GROUPING SETS operator. Identify any combinations with zero rentals and investigate the data sparsity.

9. **Advanced Query 9: Analyzing Data Skewness with STATISTICS IO**
   - Question: Use the STATISTICS IO option to analyze the I/O statistics for a complex query involving multiple joins and aggregations. Identify any tables or indexes contributing to high I/O and optimize the query accordingly.

10. **Advanced Query 10: Analyzing Data Anomalies with CHECKSUM and HASHBYTES**
    - Question: Calculate the checksum or hash value for the customer and payment tables using the CHECKSUM or HASHBYTES functions. Compare the values to detect any data anomalies or discrepancies between the tables.

Trigger - 

1. **Advanced Query 1: DDL Trigger for Schema Changes**
   - Question: Implement a DDL trigger that captures any schema changes made to the tables in the database. Log the details of the changes, including the object name, type of change, and the user who made the change.

2. **Advanced Query 2: DML Trigger for Data Auditing**
   - Question: Develop a DML trigger that tracks changes to the rental table, capturing the old and new values for the modified rows. Log the details of each change, including the user who made the change and the timestamp.

3. **Advanced Query 3: Database Trigger for Security**
   - Question: Create a database trigger that monitors failed login attempts to the database server. If a certain threshold of failed attempts is reached within a specified time frame, trigger an alert or lock the user account for security purposes.

4. **Advanced Query 4: Server Trigger for Resource Management**
   - Question: Implement a server trigger that monitors the server's CPU usage. If the CPU usage exceeds a predefined threshold for a certain duration, trigger an action such as sending an alert or throttling incoming connections to reduce the load.

5. **Advanced Query 5: Trigger Order with Multiple Triggers**
   - Question: Create multiple triggers on the payment table to enforce complex business rules, such as checking for sufficient inventory before processing a payment. Specify the execution order of the triggers and ensure that they are executed correctly.

6. **Advanced Query 6: DDL Trigger for Data Definition Integrity**
   - Question: Design a DDL trigger that prevents users from dropping critical tables in the database. If a DROP TABLE statement is issued for a protected table, roll back the transaction and log an error message.

7. **Advanced Query 7: DML Trigger for Referential Integrity**
   - Question: Develop a DML trigger that enforces referential integrity constraints between the customer and rental tables. If a customer is deleted while they have active rentals, prevent the deletion and prompt the user to return the rentals first.

8. **Advanced Query 8: Database Trigger for Data Archiving**
   - Question: Implement a database trigger that automatically archives old rental records to a separate archive table when they reach a certain age or when the rental duration exceeds a specified threshold. Ensure that the trigger operates efficiently and does not impact performance.

9. **Advanced Query 9: Server Trigger for Performance Optimization**
   - Question: Create a server trigger that monitors query execution plans for slow-performing queries. If a query's execution plan indicates a potential performance issue, log the details and suggest optimizations or index improvements to the database administrator.

10. **Advanced Query 10: Trigger Order with Nested Triggers**
    - Question: Configure nested triggers on the inventory table to handle cascading updates when a film's rental duration is modified. Ensure that the nested triggers are executed in the correct order to maintain data consistency and integrity.

Pivot Unpivot sequence and synonym -

1. **Advanced Query 1: Dynamic Pivot for Time Series Analysis**
   - Question: Implement a dynamic pivot query to analyze the rental data over time. Pivot the rental dates by month, with each month as a column, and display the count of rentals for each film category in each month.

2. **Advanced Query 2: Complex Unpivot for Data Normalization**
   - Question: Use the UNPIVOT operator to normalize the film_list view, transforming the actor names into separate rows. Include additional columns such as film title and category, and handle any null values gracefully.

3. **Advanced Query 3: Sequence for Unique Identifier Generation**
   - Question: Create a sequence object to generate unique identifiers for new records in the rental table. Ensure that the sequence increments by a fixed interval and does not produce duplicate values, even under high concurrency.

4. **Advanced Query 4: Synonym for Cross-Database Access**
   - Question: Define a synonym in the sakila database to reference the customer_list view in another database. Use the synonym to perform cross-database queries seamlessly without explicitly specifying the database name.

5. **Advanced Query 5: Dynamic Pivot with Aggregation**
   - Question: Implement a dynamic pivot query to analyze the average rental rates for each film category over time. Pivot the rental dates by year, with each year as a column, and calculate the average rental rate for each category in each year.

6. **Advanced Query 6: Unpivot with Conditional Filtering**
   - Question: Use the UNPIVOT operator to transform the inventory table, unpivoting the store_id columns into separate rows while filtering out null values. Include additional columns such as film title and rental duration.

7. **Advanced Query 7: Sequence for Gapless Number Generation**
   - Question: Create a sequence object to generate gapless invoice numbers for the payment table. Ensure that the sequence skips unused numbers and maintains a continuous sequence of numbers without any breaks.

8. **Advanced Query 8: Synonym for Schema Abstraction**
   - Question: Define a synonym in the sakila database to abstract the underlying table structure of the film_list view. Use the synonym to simplify queries and shield users from changes to the underlying schema.

9. **Advanced Query 9: Dynamic Pivot with Conditional Formatting**
   - Question: Implement a dynamic pivot query to analyze the total rental revenue for each film category over time. Pivot the rental dates by month, with each month as a column, and apply conditional formatting to highlight months with high revenue.

10. **Advanced Query 10: Unpivot with Aggregate Function**
    - Question: Use the UNPIVOT operator to transform the payment table, unpivoting the payment amounts into separate rows while calculating the total revenue for each customer. Include additional columns such as customer name and email.


Merge - 

1. **Advanced Query 1: Complex Data Synchronization**
   - Question: Utilize the MERGE statement to synchronize the customer table with an external source of customer data. Incorporate conditions to handle conflicting updates, such as preferring the external data for certain customers while retaining existing data for others.

2. **Advanced Query 2: Hierarchical Data Merging**
   - Question: Implement a hierarchical data merge using the MERGE statement to update records in the address table based on changes in the city and country tables. Ensure that the merge operation cascades through the related tables and maintains referential integrity.

3. **Advanced Query 3: Incremental Data Loading**
   - Question: Develop a process to perform incremental data loading into the inventory table using the MERGE statement. Specify conditions to insert new inventory items, update existing items, and delete obsolete items based on a predefined set of criteria.

4. **Advanced Query 4: Conflict Resolution with Logging**
   - Question: Enhance the MERGE statement to log details of conflicts encountered during the merge operation. Capture information such as the type of conflict, affected rows, and the reason for the conflict, and store it in a separate audit table for review and analysis.

5. **Advanced Query 5: Conditional Data Merging**
   - Question: Implement conditional data merging using the MERGE statement to update the film table with revised film descriptions from an external source. Apply filters to select only films that meet specific criteria for updating, such as those released within a certain time frame or belonging to particular categories.
